/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
int getLength(Node* head) {
    int length = 0;
    Node* curr = head;
    while (curr != nullptr) {
        length++;
        curr = curr->next;
    }
    return length;
}


Node *rotate(Node *head, int k) {
     // Write your code here.
     if (head == nullptr || k == 0)
        return head;

    int length = getLength(head);
    int rotation = k % length;

    if (rotation == 0)
        return head;

    Node* curr = head;
    Node* newHead = nullptr;
    Node* prev = nullptr;

    int count = 0;
    while (curr != nullptr) {
        count++;
        if (count == length - rotation + 1) {
            newHead = curr;
            prev->next = nullptr;
        }
        prev = curr;
        curr = curr->next;
    }

    prev->next = head;
    return newHead;
}
