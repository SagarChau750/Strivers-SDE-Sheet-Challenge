void helper(int i, vector<int> arr, int n, int k, vector<vector<int>> &ans, vector<int> &v){
    if(i == n){
        if(k == 0){
            ans.push_back(v);
        }
        return;
    }
    v.push_back(arr[i]);
    helper(i+1, arr, n, k - arr[i], ans, v);
    v.pop_back();
    helper(i+1, arr, n, k, ans, v);
}

vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
{
    int i = 0;
    vector<vector<int>> ans;
    vector<int> v;
    helper(i, arr, n, k, ans, v);
    return ans;
}





// void solve(int idx,vector<int>&temp,vector<vector<int>>&ans,vector<int>&arr,int n , int k){
//     if(idx == n && accumulate(temp.begin() , temp.end() , 0) == k){
//         ans.push_back(temp);
//         return;
//     }

//     if(idx >= n)
//         return;
//     for(int i = idx; i < n; i++){
//         if(i > idx && arr[i] == arr[i-1])
//             continue;

//         temp.push_back(arr[i]);
//         solve(i+1,temp,ans,arr,n , k);
//         temp.pop_back();
//     }
// }

// vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
// {
//     // Write your code here.
//      if(n==0)return{};

//     sort(arr.begin(),arr.end());
//     vector<int>temp;
//     vector<vector<int>>ans;
//     solve(0,temp,ans,arr,n , k);
//     return ans;
// }
